//-------------------------------------------------------------------------------------
1. volatile：	  	  ******************************
	 
	/*volatile*/ 告诉编译器i是随时可能发生变化的，每次使用它的时候必须从i的地址中读取，
	因而编译器生成的可执行码会重新从i的地址读取数据放在k中。 而优化做法是，由于编
	译器发现两次从i读数据的代码之间的代码没有对i进行过操作，它会自动把上次读的数据
	放在k中。而不是重新从i里面读。这样以来，如果i是一个寄存器变量或者表示一个端口数
	据就容易出错，所以说volatile可以保证对特殊地址的稳定访问，不会出错。
//--------------------------------------------------------------------------------------
2. const： 			  *******************************
 
	允许指定一个语义约束，编译器会强制实施这个约束，允许程序员告诉编译器某值是保持
      不变的。如果在编程中确实有某个值保持不变，就应该明确使用const
//--------------------------------------------------------------------------------------
3.register：		  *******************************
		
	关键字请求编译器尽可能的将变量存在CPU内部寄存器中，而不是通过内存寻址访问，
      以提高效率
//--------------------------------------------------------------------------------------
4.static:			  *******************************

      存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。
//--------------------------------------------------------------------------------------
